# Range
enum PriceEventType {
  CushionDown
  CushionUp
  WallDown
  WallUp
}

type PriceEvent @entity(immutable: true) {
  id: ID!
  blockchain: String!
  block: BigInt!
  transaction: Bytes!
  date: String!
  type: PriceEventType!
  isHigh: Boolean!
  timestamp: BigInt!
  capacityOhm: BigDecimal
  price: BigDecimal
  priceMovingAverage: BigDecimal
  cushionHighPrice: BigDecimal
  cushionLowPrice: BigDecimal
  wallHighPrice: BigDecimal
  wallLowPrice: BigDecimal
}

type PricesChangedEvent @entity(immutable: true) {
  id: ID!
  blockchain: String!
  block: BigInt!
  transaction: Bytes!
  date: String!
  cushionHighPrice: BigDecimal!
  cushionLowPrice: BigDecimal!
  wallHighPrice: BigDecimal!
  wallLowPrice: BigDecimal!
}

type SpreadsChangedEvent @entity(immutable: true) {
  id: ID!
  blockchain: String!
  block: BigInt!
  transaction: Bytes!
  date: String!
  cushionSpread: BigDecimal! # > 0.01 && < 1.0
  wallSpread: BigDecimal! # > 0.01 && < 1.0
}

type ThresholdFactorChangedEvent @entity(immutable: true) {
  id: ID!
  blockchain: String!
  block: BigInt!
  transaction: Bytes!
  date: String!
  thresholdFactor: BigDecimal! # > 0.01 && < 1.0
}

# Price
type MovingAverageDurationChanged @entity(immutable: true) {
  id: ID!
  blockchain: String!
  block: BigInt!
  transaction: Bytes!
  date: String!
  movingAverageDuration: BigInt!
}

type NewObservation @entity(immutable: true) {
  id: ID!
  blockchain: String!
  block: BigInt!
  transaction: Bytes!
  date: String!
  timestamp: BigInt! # uint256
  price: BigDecimal! # uint256
  priceMovingAverage: BigDecimal! # uint256
}

type ObservationFrequencyChanged @entity(immutable: true) {
  id: ID!
  blockchain: String!
  block: BigInt!
  transaction: Bytes!
  date: String!
  observationFrequencySeconds: BigInt! # uint48
}

type UpdateThresholdsChanged @entity(immutable: true) {
  id: ID!
  blockchain: String!
  block: BigInt!
  transaction: Bytes!
  date: String!
  ohmEthUpdateThresholdSeconds: BigInt! # uint48
  reserveEthUpdateThresholdSeconds: BigInt! # uint48
}
