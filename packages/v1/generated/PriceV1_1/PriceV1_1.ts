// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  Address,
  BigInt,
  Bytes,
  Entity,
  ethereum,
  JSONValue,
  TypedMap,
} from "@graphprotocol/graph-ts";

export class MinimumTargetPriceChanged extends ethereum.Event {
  get params(): MinimumTargetPriceChanged__Params {
    return new MinimumTargetPriceChanged__Params(this);
  }
}

export class MinimumTargetPriceChanged__Params {
  _event: MinimumTargetPriceChanged;

  constructor(event: MinimumTargetPriceChanged) {
    this._event = event;
  }

  get minimumTargetPrice_(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class MovingAverageDurationChanged extends ethereum.Event {
  get params(): MovingAverageDurationChanged__Params {
    return new MovingAverageDurationChanged__Params(this);
  }
}

export class MovingAverageDurationChanged__Params {
  _event: MovingAverageDurationChanged;

  constructor(event: MovingAverageDurationChanged) {
    this._event = event;
  }

  get movingAverageDuration_(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class NewObservation extends ethereum.Event {
  get params(): NewObservation__Params {
    return new NewObservation__Params(this);
  }
}

export class NewObservation__Params {
  _event: NewObservation;

  constructor(event: NewObservation) {
    this._event = event;
  }

  get timestamp_(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get price_(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get movingAverage_(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ObservationFrequencyChanged extends ethereum.Event {
  get params(): ObservationFrequencyChanged__Params {
    return new ObservationFrequencyChanged__Params(this);
  }
}

export class ObservationFrequencyChanged__Params {
  _event: ObservationFrequencyChanged;

  constructor(event: ObservationFrequencyChanged) {
    this._event = event;
  }

  get observationFrequency_(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class UpdateThresholdsChanged extends ethereum.Event {
  get params(): UpdateThresholdsChanged__Params {
    return new UpdateThresholdsChanged__Params(this);
  }
}

export class UpdateThresholdsChanged__Params {
  _event: UpdateThresholdsChanged;

  constructor(event: UpdateThresholdsChanged) {
    this._event = event;
  }

  get ohmEthUpdateThreshold_(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get reserveEthUpdateThreshold_(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PriceV1_1__VERSIONResult {
  value0: i32;
  value1: i32;

  constructor(value0: i32, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0)),
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1)),
    );
    return map;
  }

  getMajor(): i32 {
    return this.value0;
  }

  getMinor(): i32 {
    return this.value1;
  }
}

export class PriceV1_1 extends ethereum.SmartContract {
  static bind(address: Address): PriceV1_1 {
    return new PriceV1_1("PriceV1_1", address);
  }

  KEYCODE(): Bytes {
    const result = super.call("KEYCODE", "KEYCODE():(bytes5)", []);

    return result[0].toBytes();
  }

  try_KEYCODE(): ethereum.CallResult<Bytes> {
    const result = super.tryCall("KEYCODE", "KEYCODE():(bytes5)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  VERSION(): PriceV1_1__VERSIONResult {
    const result = super.call("VERSION", "VERSION():(uint8,uint8)", []);

    return new PriceV1_1__VERSIONResult(result[0].toI32(), result[1].toI32());
  }

  try_VERSION(): ethereum.CallResult<PriceV1_1__VERSIONResult> {
    const result = super.tryCall("VERSION", "VERSION():(uint8,uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new PriceV1_1__VERSIONResult(value[0].toI32(), value[1].toI32()),
    );
  }

  cumulativeObs(): BigInt {
    const result = super.call("cumulativeObs", "cumulativeObs():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cumulativeObs(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "cumulativeObs",
      "cumulativeObs():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    const result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    const result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getCurrentPrice(): BigInt {
    const result = super.call(
      "getCurrentPrice",
      "getCurrentPrice():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getCurrentPrice(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getCurrentPrice",
      "getCurrentPrice():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLastPrice(): BigInt {
    const result = super.call("getLastPrice", "getLastPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getLastPrice(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("getLastPrice", "getLastPrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMovingAverage(): BigInt {
    const result = super.call(
      "getMovingAverage",
      "getMovingAverage():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getMovingAverage(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getMovingAverage",
      "getMovingAverage():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTargetPrice(): BigInt {
    const result = super.call("getTargetPrice", "getTargetPrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTargetPrice(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getTargetPrice",
      "getTargetPrice():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  initialized(): boolean {
    const result = super.call("initialized", "initialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_initialized(): ethereum.CallResult<boolean> {
    const result = super.tryCall("initialized", "initialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  kernel(): Address {
    const result = super.call("kernel", "kernel():(address)", []);

    return result[0].toAddress();
  }

  try_kernel(): ethereum.CallResult<Address> {
    const result = super.tryCall("kernel", "kernel():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastObservationTime(): BigInt {
    const result = super.call(
      "lastObservationTime",
      "lastObservationTime():(uint48)",
      [],
    );

    return result[0].toBigInt();
  }

  try_lastObservationTime(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "lastObservationTime",
      "lastObservationTime():(uint48)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumTargetPrice(): BigInt {
    const result = super.call(
      "minimumTargetPrice",
      "minimumTargetPrice():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_minimumTargetPrice(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "minimumTargetPrice",
      "minimumTargetPrice():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  movingAverageDuration(): BigInt {
    const result = super.call(
      "movingAverageDuration",
      "movingAverageDuration():(uint48)",
      [],
    );

    return result[0].toBigInt();
  }

  try_movingAverageDuration(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "movingAverageDuration",
      "movingAverageDuration():(uint48)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextObsIndex(): BigInt {
    const result = super.call("nextObsIndex", "nextObsIndex():(uint32)", []);

    return result[0].toBigInt();
  }

  try_nextObsIndex(): ethereum.CallResult<BigInt> {
    const result = super.tryCall("nextObsIndex", "nextObsIndex():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numObservations(): BigInt {
    const result = super.call(
      "numObservations",
      "numObservations():(uint32)",
      [],
    );

    return result[0].toBigInt();
  }

  try_numObservations(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "numObservations",
      "numObservations():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  observationFrequency(): BigInt {
    const result = super.call(
      "observationFrequency",
      "observationFrequency():(uint48)",
      [],
    );

    return result[0].toBigInt();
  }

  try_observationFrequency(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "observationFrequency",
      "observationFrequency():(uint48)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  observations(param0: BigInt): BigInt {
    const result = super.call("observations", "observations(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toBigInt();
  }

  try_observations(param0: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "observations",
      "observations(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ohmEthPriceFeed(): Address {
    const result = super.call(
      "ohmEthPriceFeed",
      "ohmEthPriceFeed():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_ohmEthPriceFeed(): ethereum.CallResult<Address> {
    const result = super.tryCall(
      "ohmEthPriceFeed",
      "ohmEthPriceFeed():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ohmEthUpdateThreshold(): BigInt {
    const result = super.call(
      "ohmEthUpdateThreshold",
      "ohmEthUpdateThreshold():(uint48)",
      [],
    );

    return result[0].toBigInt();
  }

  try_ohmEthUpdateThreshold(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "ohmEthUpdateThreshold",
      "ohmEthUpdateThreshold():(uint48)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  reserveEthPriceFeed(): Address {
    const result = super.call(
      "reserveEthPriceFeed",
      "reserveEthPriceFeed():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_reserveEthPriceFeed(): ethereum.CallResult<Address> {
    const result = super.tryCall(
      "reserveEthPriceFeed",
      "reserveEthPriceFeed():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  reserveEthUpdateThreshold(): BigInt {
    const result = super.call(
      "reserveEthUpdateThreshold",
      "reserveEthUpdateThreshold():(uint48)",
      [],
    );

    return result[0].toBigInt();
  }

  try_reserveEthUpdateThreshold(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "reserveEthUpdateThreshold",
      "reserveEthUpdateThreshold():(uint48)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get kernel_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ohmEthPriceFeed_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ohmEthUpdateThreshold_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get reserveEthPriceFeed_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get reserveEthUpdateThreshold_(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get observationFrequency_(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get movingAverageDuration_(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get minimumTargetPrice_(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class INITCall extends ethereum.Call {
  get inputs(): INITCall__Inputs {
    return new INITCall__Inputs(this);
  }

  get outputs(): INITCall__Outputs {
    return new INITCall__Outputs(this);
  }
}

export class INITCall__Inputs {
  _call: INITCall;

  constructor(call: INITCall) {
    this._call = call;
  }
}

export class INITCall__Outputs {
  _call: INITCall;

  constructor(call: INITCall) {
    this._call = call;
  }
}

export class ChangeKernelCall extends ethereum.Call {
  get inputs(): ChangeKernelCall__Inputs {
    return new ChangeKernelCall__Inputs(this);
  }

  get outputs(): ChangeKernelCall__Outputs {
    return new ChangeKernelCall__Outputs(this);
  }
}

export class ChangeKernelCall__Inputs {
  _call: ChangeKernelCall;

  constructor(call: ChangeKernelCall) {
    this._call = call;
  }

  get newKernel_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeKernelCall__Outputs {
  _call: ChangeKernelCall;

  constructor(call: ChangeKernelCall) {
    this._call = call;
  }
}

export class ChangeMinimumTargetPriceCall extends ethereum.Call {
  get inputs(): ChangeMinimumTargetPriceCall__Inputs {
    return new ChangeMinimumTargetPriceCall__Inputs(this);
  }

  get outputs(): ChangeMinimumTargetPriceCall__Outputs {
    return new ChangeMinimumTargetPriceCall__Outputs(this);
  }
}

export class ChangeMinimumTargetPriceCall__Inputs {
  _call: ChangeMinimumTargetPriceCall;

  constructor(call: ChangeMinimumTargetPriceCall) {
    this._call = call;
  }

  get minimumTargetPrice_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeMinimumTargetPriceCall__Outputs {
  _call: ChangeMinimumTargetPriceCall;

  constructor(call: ChangeMinimumTargetPriceCall) {
    this._call = call;
  }
}

export class ChangeMovingAverageDurationCall extends ethereum.Call {
  get inputs(): ChangeMovingAverageDurationCall__Inputs {
    return new ChangeMovingAverageDurationCall__Inputs(this);
  }

  get outputs(): ChangeMovingAverageDurationCall__Outputs {
    return new ChangeMovingAverageDurationCall__Outputs(this);
  }
}

export class ChangeMovingAverageDurationCall__Inputs {
  _call: ChangeMovingAverageDurationCall;

  constructor(call: ChangeMovingAverageDurationCall) {
    this._call = call;
  }

  get movingAverageDuration_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeMovingAverageDurationCall__Outputs {
  _call: ChangeMovingAverageDurationCall;

  constructor(call: ChangeMovingAverageDurationCall) {
    this._call = call;
  }
}

export class ChangeObservationFrequencyCall extends ethereum.Call {
  get inputs(): ChangeObservationFrequencyCall__Inputs {
    return new ChangeObservationFrequencyCall__Inputs(this);
  }

  get outputs(): ChangeObservationFrequencyCall__Outputs {
    return new ChangeObservationFrequencyCall__Outputs(this);
  }
}

export class ChangeObservationFrequencyCall__Inputs {
  _call: ChangeObservationFrequencyCall;

  constructor(call: ChangeObservationFrequencyCall) {
    this._call = call;
  }

  get observationFrequency_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeObservationFrequencyCall__Outputs {
  _call: ChangeObservationFrequencyCall;

  constructor(call: ChangeObservationFrequencyCall) {
    this._call = call;
  }
}

export class ChangeUpdateThresholdsCall extends ethereum.Call {
  get inputs(): ChangeUpdateThresholdsCall__Inputs {
    return new ChangeUpdateThresholdsCall__Inputs(this);
  }

  get outputs(): ChangeUpdateThresholdsCall__Outputs {
    return new ChangeUpdateThresholdsCall__Outputs(this);
  }
}

export class ChangeUpdateThresholdsCall__Inputs {
  _call: ChangeUpdateThresholdsCall;

  constructor(call: ChangeUpdateThresholdsCall) {
    this._call = call;
  }

  get ohmEthUpdateThreshold_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get reserveEthUpdateThreshold_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ChangeUpdateThresholdsCall__Outputs {
  _call: ChangeUpdateThresholdsCall;

  constructor(call: ChangeUpdateThresholdsCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get startObservations_(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get lastObservationTime_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class UpdateMovingAverageCall extends ethereum.Call {
  get inputs(): UpdateMovingAverageCall__Inputs {
    return new UpdateMovingAverageCall__Inputs(this);
  }

  get outputs(): UpdateMovingAverageCall__Outputs {
    return new UpdateMovingAverageCall__Outputs(this);
  }
}

export class UpdateMovingAverageCall__Inputs {
  _call: UpdateMovingAverageCall;

  constructor(call: UpdateMovingAverageCall) {
    this._call = call;
  }
}

export class UpdateMovingAverageCall__Outputs {
  _call: UpdateMovingAverageCall;

  constructor(call: UpdateMovingAverageCall) {
    this._call = call;
  }
}
