// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  Address,
  BigInt,
  Bytes,
  Entity,
  ethereum,
  JSONValue,
  TypedMap,
} from "@graphprotocol/graph-ts";

export class AssetObservation extends ethereum.Event {
  get params(): AssetObservation__Params {
    return new AssetObservation__Params(this);
  }
}

export class AssetObservation__Params {
  _event: AssetObservation;

  constructor(event: AssetObservation) {
    this._event = event;
  }

  get asset(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CategoryObservation extends ethereum.Event {
  get params(): CategoryObservation__Params {
    return new CategoryObservation__Params(this);
  }
}

export class CategoryObservation__Params {
  _event: CategoryObservation;

  constructor(event: CategoryObservation) {
    this._event = event;
  }

  get category(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MetricObservation extends ethereum.Event {
  get params(): MetricObservation__Params {
    return new MetricObservation__Params(this);
  }
}

export class MetricObservation__Params {
  _event: MetricObservation;

  constructor(event: MetricObservation) {
    this._event = event;
  }

  get metric(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Appraiser__VERSIONResult {
  value0: i32;
  value1: i32;

  constructor(value0: i32, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0)),
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1)),
    );
    return map;
  }

  getMajor(): i32 {
    return this.value0;
  }

  getMinor(): i32 {
    return this.value1;
  }
}

export class Appraiser__assetValueCacheResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue(): BigInt {
    return this.value0;
  }

  getTimestamp(): BigInt {
    return this.value1;
  }
}

export class Appraiser__assetValueMovingAverageResult {
  value0: BigInt;
  value1: i32;
  value2: i32;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: i32,
    value2: i32,
    value3: BigInt,
    value4: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1)),
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2)),
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getMovingAverageDuration(): BigInt {
    return this.value0;
  }

  getNextObsIndex(): i32 {
    return this.value1;
  }

  getNumObservations(): i32 {
    return this.value2;
  }

  getLastObservationTime(): BigInt {
    return this.value3;
  }

  getCumulativeObs(): BigInt {
    return this.value4;
  }
}

export class Appraiser__categoryValueCacheResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue(): BigInt {
    return this.value0;
  }

  getTimestamp(): BigInt {
    return this.value1;
  }
}

export class Appraiser__categoryValueMovingAverageResult {
  value0: BigInt;
  value1: i32;
  value2: i32;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: i32,
    value2: i32,
    value3: BigInt,
    value4: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1)),
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2)),
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getMovingAverageDuration(): BigInt {
    return this.value0;
  }

  getNextObsIndex(): i32 {
    return this.value1;
  }

  getNumObservations(): i32 {
    return this.value2;
  }

  getLastObservationTime(): BigInt {
    return this.value3;
  }

  getCumulativeObs(): BigInt {
    return this.value4;
  }
}

export class Appraiser__getAssetMovingAverageDataResultValue0Struct extends ethereum.Tuple {
  get movingAverageDuration(): BigInt {
    return this[0].toBigInt();
  }

  get nextObsIndex(): i32 {
    return this[1].toI32();
  }

  get numObservations(): i32 {
    return this[2].toI32();
  }

  get lastObservationTime(): BigInt {
    return this[3].toBigInt();
  }

  get cumulativeObs(): BigInt {
    return this[4].toBigInt();
  }

  get obs(): Array<BigInt> {
    return this[5].toBigIntArray();
  }
}

export class Appraiser__getAssetValueResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Appraiser__getCategoryMovingAverageDataResultValue0Struct extends ethereum.Tuple {
  get movingAverageDuration(): BigInt {
    return this[0].toBigInt();
  }

  get nextObsIndex(): i32 {
    return this[1].toI32();
  }

  get numObservations(): i32 {
    return this[2].toI32();
  }

  get lastObservationTime(): BigInt {
    return this[3].toBigInt();
  }

  get cumulativeObs(): BigInt {
    return this[4].toBigInt();
  }

  get obs(): Array<BigInt> {
    return this[5].toBigIntArray();
  }
}

export class Appraiser__getCategoryValue2Result {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Appraiser__getMetricResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue0(): BigInt {
    return this.value0;
  }

  getValue1(): BigInt {
    return this.value1;
  }
}

export class Appraiser__getMetricMovingAverageDataResultValue0Struct extends ethereum.Tuple {
  get movingAverageDuration(): BigInt {
    return this[0].toBigInt();
  }

  get nextObsIndex(): i32 {
    return this[1].toI32();
  }

  get numObservations(): i32 {
    return this[2].toI32();
  }

  get lastObservationTime(): BigInt {
    return this[3].toBigInt();
  }

  get cumulativeObs(): BigInt {
    return this[4].toBigInt();
  }

  get obs(): Array<BigInt> {
    return this[5].toBigIntArray();
  }
}

export class Appraiser__metricCacheResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getValue(): BigInt {
    return this.value0;
  }

  getTimestamp(): BigInt {
    return this.value1;
  }
}

export class Appraiser__metricMovingAverageResult {
  value0: BigInt;
  value1: i32;
  value2: i32;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: i32,
    value2: i32,
    value3: BigInt,
    value4: BigInt,
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    const map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1)),
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2)),
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getMovingAverageDuration(): BigInt {
    return this.value0;
  }

  getNextObsIndex(): i32 {
    return this.value1;
  }

  getNumObservations(): i32 {
    return this.value2;
  }

  getLastObservationTime(): BigInt {
    return this.value3;
  }

  getCumulativeObs(): BigInt {
    return this.value4;
  }
}

export class Appraiser__requestPermissionsResultRequestsStruct extends ethereum.Tuple {
  get keycode(): Bytes {
    return this[0].toBytes();
  }

  get funcSelector(): Bytes {
    return this[1].toBytes();
  }
}

export class Appraiser extends ethereum.SmartContract {
  static bind(address: Address): Appraiser {
    return new Appraiser("Appraiser", address);
  }

  ROLES(): Address {
    const result = super.call("ROLES", "ROLES():(address)", []);

    return result[0].toAddress();
  }

  try_ROLES(): ethereum.CallResult<Address> {
    const result = super.tryCall("ROLES", "ROLES():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  VERSION(): Appraiser__VERSIONResult {
    const result = super.call("VERSION", "VERSION():(uint8,uint8)", []);

    return new Appraiser__VERSIONResult(result[0].toI32(), result[1].toI32());
  }

  try_VERSION(): ethereum.CallResult<Appraiser__VERSIONResult> {
    const result = super.tryCall("VERSION", "VERSION():(uint8,uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new Appraiser__VERSIONResult(value[0].toI32(), value[1].toI32()),
    );
  }

  assetValueCache(param0: Address): Appraiser__assetValueCacheResult {
    const result = super.call(
      "assetValueCache",
      "assetValueCache(address):(uint256,uint48)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new Appraiser__assetValueCacheResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_assetValueCache(
    param0: Address,
  ): ethereum.CallResult<Appraiser__assetValueCacheResult> {
    const result = super.tryCall(
      "assetValueCache",
      "assetValueCache(address):(uint256,uint48)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new Appraiser__assetValueCacheResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  assetValueMovingAverage(
    param0: Address,
  ): Appraiser__assetValueMovingAverageResult {
    const result = super.call(
      "assetValueMovingAverage",
      "assetValueMovingAverage(address):(uint32,uint16,uint16,uint48,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return new Appraiser__assetValueMovingAverageResult(
      result[0].toBigInt(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toBigInt(),
      result[4].toBigInt(),
    );
  }

  try_assetValueMovingAverage(
    param0: Address,
  ): ethereum.CallResult<Appraiser__assetValueMovingAverageResult> {
    const result = super.tryCall(
      "assetValueMovingAverage",
      "assetValueMovingAverage(address):(uint32,uint16,uint16,uint48,uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new Appraiser__assetValueMovingAverageResult(
        value[0].toBigInt(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toBigInt(),
        value[4].toBigInt(),
      ),
    );
  }

  categoryValueCache(param0: Bytes): Appraiser__categoryValueCacheResult {
    const result = super.call(
      "categoryValueCache",
      "categoryValueCache(bytes32):(uint256,uint48)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return new Appraiser__categoryValueCacheResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_categoryValueCache(
    param0: Bytes,
  ): ethereum.CallResult<Appraiser__categoryValueCacheResult> {
    const result = super.tryCall(
      "categoryValueCache",
      "categoryValueCache(bytes32):(uint256,uint48)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new Appraiser__categoryValueCacheResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  categoryValueMovingAverage(
    param0: Bytes,
  ): Appraiser__categoryValueMovingAverageResult {
    const result = super.call(
      "categoryValueMovingAverage",
      "categoryValueMovingAverage(bytes32):(uint32,uint16,uint16,uint48,uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );

    return new Appraiser__categoryValueMovingAverageResult(
      result[0].toBigInt(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toBigInt(),
      result[4].toBigInt(),
    );
  }

  try_categoryValueMovingAverage(
    param0: Bytes,
  ): ethereum.CallResult<Appraiser__categoryValueMovingAverageResult> {
    const result = super.tryCall(
      "categoryValueMovingAverage",
      "categoryValueMovingAverage(bytes32):(uint32,uint16,uint16,uint48,uint256)",
      [ethereum.Value.fromFixedBytes(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new Appraiser__categoryValueMovingAverageResult(
        value[0].toBigInt(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toBigInt(),
        value[4].toBigInt(),
      ),
    );
  }

  configureDependencies(): Array<Bytes> {
    const result = super.call(
      "configureDependencies",
      "configureDependencies():(bytes5[])",
      [],
    );

    return result[0].toBytesArray();
  }

  try_configureDependencies(): ethereum.CallResult<Array<Bytes>> {
    const result = super.tryCall(
      "configureDependencies",
      "configureDependencies():(bytes5[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  decimals(): i32 {
    const result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    const result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getAssetMovingAverageData(
    asset_: Address,
  ): Appraiser__getAssetMovingAverageDataResultValue0Struct {
    const result = super.call(
      "getAssetMovingAverageData",
      "getAssetMovingAverageData(address):((uint32,uint16,uint16,uint48,uint256,uint256[]))",
      [ethereum.Value.fromAddress(asset_)],
    );

    return changetype<Appraiser__getAssetMovingAverageDataResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getAssetMovingAverageData(
    asset_: Address,
  ): ethereum.CallResult<Appraiser__getAssetMovingAverageDataResultValue0Struct> {
    const result = super.tryCall(
      "getAssetMovingAverageData",
      "getAssetMovingAverageData(address):((uint32,uint16,uint16,uint48,uint256,uint256[]))",
      [ethereum.Value.fromAddress(asset_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Appraiser__getAssetMovingAverageDataResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getAssetValue(
    asset_: Address,
    variant_: i32,
  ): Appraiser__getAssetValueResult {
    const result = super.call(
      "getAssetValue",
      "getAssetValue(address,uint8):(uint256,uint48)",
      [
        ethereum.Value.fromAddress(asset_),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(variant_)),
      ],
    );

    return new Appraiser__getAssetValueResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_getAssetValue(
    asset_: Address,
    variant_: i32,
  ): ethereum.CallResult<Appraiser__getAssetValueResult> {
    const result = super.tryCall(
      "getAssetValue",
      "getAssetValue(address,uint8):(uint256,uint48)",
      [
        ethereum.Value.fromAddress(asset_),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(variant_)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new Appraiser__getAssetValueResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  getAssetValue1(asset_: Address, maxAge_: BigInt): BigInt {
    const result = super.call(
      "getAssetValue",
      "getAssetValue(address,uint48):(uint256)",
      [
        ethereum.Value.fromAddress(asset_),
        ethereum.Value.fromUnsignedBigInt(maxAge_),
      ],
    );

    return result[0].toBigInt();
  }

  try_getAssetValue1(
    asset_: Address,
    maxAge_: BigInt,
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getAssetValue",
      "getAssetValue(address,uint48):(uint256)",
      [
        ethereum.Value.fromAddress(asset_),
        ethereum.Value.fromUnsignedBigInt(maxAge_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getAssetValue2(asset_: Address): BigInt {
    const result = super.call(
      "getAssetValue",
      "getAssetValue(address):(uint256)",
      [ethereum.Value.fromAddress(asset_)],
    );

    return result[0].toBigInt();
  }

  try_getAssetValue2(asset_: Address): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getAssetValue",
      "getAssetValue(address):(uint256)",
      [ethereum.Value.fromAddress(asset_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCategoryMovingAverageData(
    category_: Bytes,
  ): Appraiser__getCategoryMovingAverageDataResultValue0Struct {
    const result = super.call(
      "getCategoryMovingAverageData",
      "getCategoryMovingAverageData(bytes32):((uint32,uint16,uint16,uint48,uint256,uint256[]))",
      [ethereum.Value.fromFixedBytes(category_)],
    );

    return changetype<Appraiser__getCategoryMovingAverageDataResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getCategoryMovingAverageData(
    category_: Bytes,
  ): ethereum.CallResult<Appraiser__getCategoryMovingAverageDataResultValue0Struct> {
    const result = super.tryCall(
      "getCategoryMovingAverageData",
      "getCategoryMovingAverageData(bytes32):((uint32,uint16,uint16,uint48,uint256,uint256[]))",
      [ethereum.Value.fromFixedBytes(category_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Appraiser__getCategoryMovingAverageDataResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getCategoryValue(category_: Bytes): BigInt {
    const result = super.call(
      "getCategoryValue",
      "getCategoryValue(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(category_)],
    );

    return result[0].toBigInt();
  }

  try_getCategoryValue(category_: Bytes): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getCategoryValue",
      "getCategoryValue(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(category_)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCategoryValue1(category_: Bytes, maxAge_: BigInt): BigInt {
    const result = super.call(
      "getCategoryValue",
      "getCategoryValue(bytes32,uint48):(uint256)",
      [
        ethereum.Value.fromFixedBytes(category_),
        ethereum.Value.fromUnsignedBigInt(maxAge_),
      ],
    );

    return result[0].toBigInt();
  }

  try_getCategoryValue1(
    category_: Bytes,
    maxAge_: BigInt,
  ): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getCategoryValue",
      "getCategoryValue(bytes32,uint48):(uint256)",
      [
        ethereum.Value.fromFixedBytes(category_),
        ethereum.Value.fromUnsignedBigInt(maxAge_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCategoryValue2(
    category_: Bytes,
    variant_: i32,
  ): Appraiser__getCategoryValue2Result {
    const result = super.call(
      "getCategoryValue",
      "getCategoryValue(bytes32,uint8):(uint256,uint48)",
      [
        ethereum.Value.fromFixedBytes(category_),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(variant_)),
      ],
    );

    return new Appraiser__getCategoryValue2Result(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_getCategoryValue2(
    category_: Bytes,
    variant_: i32,
  ): ethereum.CallResult<Appraiser__getCategoryValue2Result> {
    const result = super.tryCall(
      "getCategoryValue",
      "getCategoryValue(bytes32,uint8):(uint256,uint48)",
      [
        ethereum.Value.fromFixedBytes(category_),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(variant_)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new Appraiser__getCategoryValue2Result(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  getMetric(metric_: i32, variant_: i32): Appraiser__getMetricResult {
    const result = super.call(
      "getMetric",
      "getMetric(uint8,uint8):(uint256,uint48)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(metric_)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(variant_)),
      ],
    );

    return new Appraiser__getMetricResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_getMetric(
    metric_: i32,
    variant_: i32,
  ): ethereum.CallResult<Appraiser__getMetricResult> {
    const result = super.tryCall(
      "getMetric",
      "getMetric(uint8,uint8):(uint256,uint48)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(metric_)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(variant_)),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new Appraiser__getMetricResult(value[0].toBigInt(), value[1].toBigInt()),
    );
  }

  getMetric1(metric_: i32, maxAge_: BigInt): BigInt {
    const result = super.call("getMetric", "getMetric(uint8,uint48):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(metric_)),
      ethereum.Value.fromUnsignedBigInt(maxAge_),
    ]);

    return result[0].toBigInt();
  }

  try_getMetric1(metric_: i32, maxAge_: BigInt): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getMetric",
      "getMetric(uint8,uint48):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(metric_)),
        ethereum.Value.fromUnsignedBigInt(maxAge_),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMetric2(metric_: i32): BigInt {
    const result = super.call("getMetric", "getMetric(uint8):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(metric_)),
    ]);

    return result[0].toBigInt();
  }

  try_getMetric2(metric_: i32): ethereum.CallResult<BigInt> {
    const result = super.tryCall("getMetric", "getMetric(uint8):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(metric_)),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMetricMovingAverageData(
    metric_: i32,
  ): Appraiser__getMetricMovingAverageDataResultValue0Struct {
    const result = super.call(
      "getMetricMovingAverageData",
      "getMetricMovingAverageData(uint8):((uint32,uint16,uint16,uint48,uint256,uint256[]))",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(metric_))],
    );

    return changetype<Appraiser__getMetricMovingAverageDataResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_getMetricMovingAverageData(
    metric_: i32,
  ): ethereum.CallResult<Appraiser__getMetricMovingAverageDataResultValue0Struct> {
    const result = super.tryCall(
      "getMetricMovingAverageData",
      "getMetricMovingAverageData(uint8):((uint32,uint16,uint16,uint48,uint256,uint256[]))",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(metric_))],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Appraiser__getMetricMovingAverageDataResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  getObservationFrequency(): BigInt {
    const result = super.call(
      "getObservationFrequency",
      "getObservationFrequency():(uint32)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getObservationFrequency(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "getObservationFrequency",
      "getObservationFrequency():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isActive(): boolean {
    const result = super.call("isActive", "isActive():(bool)", []);

    return result[0].toBoolean();
  }

  try_isActive(): ethereum.CallResult<boolean> {
    const result = super.tryCall("isActive", "isActive():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  kernel(): Address {
    const result = super.call("kernel", "kernel():(address)", []);

    return result[0].toAddress();
  }

  try_kernel(): ethereum.CallResult<Address> {
    const result = super.tryCall("kernel", "kernel():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  metricCache(param0: i32): Appraiser__metricCacheResult {
    const result = super.call(
      "metricCache",
      "metricCache(uint8):(uint256,uint48)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))],
    );

    return new Appraiser__metricCacheResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_metricCache(
    param0: i32,
  ): ethereum.CallResult<Appraiser__metricCacheResult> {
    const result = super.tryCall(
      "metricCache",
      "metricCache(uint8):(uint256,uint48)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new Appraiser__metricCacheResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }

  metricMovingAverage(param0: i32): Appraiser__metricMovingAverageResult {
    const result = super.call(
      "metricMovingAverage",
      "metricMovingAverage(uint8):(uint32,uint16,uint16,uint48,uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))],
    );

    return new Appraiser__metricMovingAverageResult(
      result[0].toBigInt(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toBigInt(),
      result[4].toBigInt(),
    );
  }

  try_metricMovingAverage(
    param0: i32,
  ): ethereum.CallResult<Appraiser__metricMovingAverageResult> {
    const result = super.tryCall(
      "metricMovingAverage",
      "metricMovingAverage(uint8):(uint32,uint16,uint16,uint48,uint256)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      new Appraiser__metricMovingAverageResult(
        value[0].toBigInt(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toBigInt(),
        value[4].toBigInt(),
      ),
    );
  }

  observationFrequency(): BigInt {
    const result = super.call(
      "observationFrequency",
      "observationFrequency():(uint32)",
      [],
    );

    return result[0].toBigInt();
  }

  try_observationFrequency(): ethereum.CallResult<BigInt> {
    const result = super.tryCall(
      "observationFrequency",
      "observationFrequency():(uint32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  requestPermissions(): Array<Appraiser__requestPermissionsResultRequestsStruct> {
    const result = super.call(
      "requestPermissions",
      "requestPermissions():((bytes5,bytes4)[])",
      [],
    );

    return result[0].toTupleArray<Appraiser__requestPermissionsResultRequestsStruct>();
  }

  try_requestPermissions(): ethereum.CallResult<
    Array<Appraiser__requestPermissionsResultRequestsStruct>
  > {
    const result = super.tryCall(
      "requestPermissions",
      "requestPermissions():((bytes5,bytes4)[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    const value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Appraiser__requestPermissionsResultRequestsStruct>(),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get kernel_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get observationFrequency_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ChangeKernelCall extends ethereum.Call {
  get inputs(): ChangeKernelCall__Inputs {
    return new ChangeKernelCall__Inputs(this);
  }

  get outputs(): ChangeKernelCall__Outputs {
    return new ChangeKernelCall__Outputs(this);
  }
}

export class ChangeKernelCall__Inputs {
  _call: ChangeKernelCall;

  constructor(call: ChangeKernelCall) {
    this._call = call;
  }

  get newKernel_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeKernelCall__Outputs {
  _call: ChangeKernelCall;

  constructor(call: ChangeKernelCall) {
    this._call = call;
  }
}

export class ConfigureDependenciesCall extends ethereum.Call {
  get inputs(): ConfigureDependenciesCall__Inputs {
    return new ConfigureDependenciesCall__Inputs(this);
  }

  get outputs(): ConfigureDependenciesCall__Outputs {
    return new ConfigureDependenciesCall__Outputs(this);
  }
}

export class ConfigureDependenciesCall__Inputs {
  _call: ConfigureDependenciesCall;

  constructor(call: ConfigureDependenciesCall) {
    this._call = call;
  }
}

export class ConfigureDependenciesCall__Outputs {
  _call: ConfigureDependenciesCall;

  constructor(call: ConfigureDependenciesCall) {
    this._call = call;
  }

  get dependencies(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class StoreAssetObservationCall extends ethereum.Call {
  get inputs(): StoreAssetObservationCall__Inputs {
    return new StoreAssetObservationCall__Inputs(this);
  }

  get outputs(): StoreAssetObservationCall__Outputs {
    return new StoreAssetObservationCall__Outputs(this);
  }
}

export class StoreAssetObservationCall__Inputs {
  _call: StoreAssetObservationCall;

  constructor(call: StoreAssetObservationCall) {
    this._call = call;
  }

  get asset_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class StoreAssetObservationCall__Outputs {
  _call: StoreAssetObservationCall;

  constructor(call: StoreAssetObservationCall) {
    this._call = call;
  }
}

export class StoreAssetValueCall extends ethereum.Call {
  get inputs(): StoreAssetValueCall__Inputs {
    return new StoreAssetValueCall__Inputs(this);
  }

  get outputs(): StoreAssetValueCall__Outputs {
    return new StoreAssetValueCall__Outputs(this);
  }
}

export class StoreAssetValueCall__Inputs {
  _call: StoreAssetValueCall;

  constructor(call: StoreAssetValueCall) {
    this._call = call;
  }

  get asset_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class StoreAssetValueCall__Outputs {
  _call: StoreAssetValueCall;

  constructor(call: StoreAssetValueCall) {
    this._call = call;
  }
}

export class StoreCategoryObservationCall extends ethereum.Call {
  get inputs(): StoreCategoryObservationCall__Inputs {
    return new StoreCategoryObservationCall__Inputs(this);
  }

  get outputs(): StoreCategoryObservationCall__Outputs {
    return new StoreCategoryObservationCall__Outputs(this);
  }
}

export class StoreCategoryObservationCall__Inputs {
  _call: StoreCategoryObservationCall;

  constructor(call: StoreCategoryObservationCall) {
    this._call = call;
  }

  get category_(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class StoreCategoryObservationCall__Outputs {
  _call: StoreCategoryObservationCall;

  constructor(call: StoreCategoryObservationCall) {
    this._call = call;
  }
}

export class StoreCategoryValueCall extends ethereum.Call {
  get inputs(): StoreCategoryValueCall__Inputs {
    return new StoreCategoryValueCall__Inputs(this);
  }

  get outputs(): StoreCategoryValueCall__Outputs {
    return new StoreCategoryValueCall__Outputs(this);
  }
}

export class StoreCategoryValueCall__Inputs {
  _call: StoreCategoryValueCall;

  constructor(call: StoreCategoryValueCall) {
    this._call = call;
  }

  get category_(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class StoreCategoryValueCall__Outputs {
  _call: StoreCategoryValueCall;

  constructor(call: StoreCategoryValueCall) {
    this._call = call;
  }
}

export class StoreMetricCall extends ethereum.Call {
  get inputs(): StoreMetricCall__Inputs {
    return new StoreMetricCall__Inputs(this);
  }

  get outputs(): StoreMetricCall__Outputs {
    return new StoreMetricCall__Outputs(this);
  }
}

export class StoreMetricCall__Inputs {
  _call: StoreMetricCall;

  constructor(call: StoreMetricCall) {
    this._call = call;
  }

  get metric_(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class StoreMetricCall__Outputs {
  _call: StoreMetricCall;

  constructor(call: StoreMetricCall) {
    this._call = call;
  }
}

export class StoreMetricObservationCall extends ethereum.Call {
  get inputs(): StoreMetricObservationCall__Inputs {
    return new StoreMetricObservationCall__Inputs(this);
  }

  get outputs(): StoreMetricObservationCall__Outputs {
    return new StoreMetricObservationCall__Outputs(this);
  }
}

export class StoreMetricObservationCall__Inputs {
  _call: StoreMetricObservationCall;

  constructor(call: StoreMetricObservationCall) {
    this._call = call;
  }

  get metric_(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class StoreMetricObservationCall__Outputs {
  _call: StoreMetricObservationCall;

  constructor(call: StoreMetricObservationCall) {
    this._call = call;
  }
}

export class UpdateAssetMovingAverageCall extends ethereum.Call {
  get inputs(): UpdateAssetMovingAverageCall__Inputs {
    return new UpdateAssetMovingAverageCall__Inputs(this);
  }

  get outputs(): UpdateAssetMovingAverageCall__Outputs {
    return new UpdateAssetMovingAverageCall__Outputs(this);
  }
}

export class UpdateAssetMovingAverageCall__Inputs {
  _call: UpdateAssetMovingAverageCall;

  constructor(call: UpdateAssetMovingAverageCall) {
    this._call = call;
  }

  get asset_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get movingAverageDuration_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get lastObservationTime_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get observations_(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class UpdateAssetMovingAverageCall__Outputs {
  _call: UpdateAssetMovingAverageCall;

  constructor(call: UpdateAssetMovingAverageCall) {
    this._call = call;
  }
}

export class UpdateCategoryMovingAverageCall extends ethereum.Call {
  get inputs(): UpdateCategoryMovingAverageCall__Inputs {
    return new UpdateCategoryMovingAverageCall__Inputs(this);
  }

  get outputs(): UpdateCategoryMovingAverageCall__Outputs {
    return new UpdateCategoryMovingAverageCall__Outputs(this);
  }
}

export class UpdateCategoryMovingAverageCall__Inputs {
  _call: UpdateCategoryMovingAverageCall;

  constructor(call: UpdateCategoryMovingAverageCall) {
    this._call = call;
  }

  get category_(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get movingAverageDuration_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get lastObservationTime_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get observations_(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class UpdateCategoryMovingAverageCall__Outputs {
  _call: UpdateCategoryMovingAverageCall;

  constructor(call: UpdateCategoryMovingAverageCall) {
    this._call = call;
  }
}

export class UpdateMetricMovingAverageCall extends ethereum.Call {
  get inputs(): UpdateMetricMovingAverageCall__Inputs {
    return new UpdateMetricMovingAverageCall__Inputs(this);
  }

  get outputs(): UpdateMetricMovingAverageCall__Outputs {
    return new UpdateMetricMovingAverageCall__Outputs(this);
  }
}

export class UpdateMetricMovingAverageCall__Inputs {
  _call: UpdateMetricMovingAverageCall;

  constructor(call: UpdateMetricMovingAverageCall) {
    this._call = call;
  }

  get metric_(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get movingAverageDuration_(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get lastObservationTime_(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get observations_(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class UpdateMetricMovingAverageCall__Outputs {
  _call: UpdateMetricMovingAverageCall;

  constructor(call: UpdateMetricMovingAverageCall) {
    this._call = call;
  }
}
