// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  BigDecimal,
  BigInt,
  Bytes,
  Entity,
  store,
  TypedMap,
  Value,
  ValueKind,
} from "@graphprotocol/graph-ts";

export class RangeSnapshot extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save RangeSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type RangeSnapshot must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("RangeSnapshot", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): RangeSnapshot | null {
    return changetype<RangeSnapshot | null>(
      store.get_in_block("RangeSnapshot", id.toHexString()),
    );
  }

  static load(id: Bytes): RangeSnapshot | null {
    return changetype<RangeSnapshot | null>(
      store.get("RangeSnapshot", id.toHexString()),
    );
  }

  get id(): Bytes {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get blockchain(): string {
    const value = this.get("blockchain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set blockchain(value: string) {
    this.set("blockchain", Value.fromString(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get date(): string {
    const value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get timestamp(): BigInt {
    const value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get ohmPrice(): BigDecimal | null {
    const value = this.get("ohmPrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set ohmPrice(value: BigDecimal | null) {
    if (!value) {
      this.unset("ohmPrice");
    } else {
      this.set("ohmPrice", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get ohmMovingAveragePrice(): BigDecimal | null {
    const value = this.get("ohmMovingAveragePrice");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set ohmMovingAveragePrice(value: BigDecimal | null) {
    if (!value) {
      this.unset("ohmMovingAveragePrice");
    } else {
      this.set(
        "ohmMovingAveragePrice",
        Value.fromBigDecimal(<BigDecimal>value),
      );
    }
  }

  get thresholdFactor(): BigDecimal {
    const value = this.get("thresholdFactor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set thresholdFactor(value: BigDecimal) {
    this.set("thresholdFactor", Value.fromBigDecimal(value));
  }

  get highCushionSpread(): BigDecimal | null {
    const value = this.get("highCushionSpread");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set highCushionSpread(value: BigDecimal | null) {
    if (!value) {
      this.unset("highCushionSpread");
    } else {
      this.set("highCushionSpread", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get highWallSpread(): BigDecimal | null {
    const value = this.get("highWallSpread");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set highWallSpread(value: BigDecimal | null) {
    if (!value) {
      this.unset("highWallSpread");
    } else {
      this.set("highWallSpread", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get lowCushionSpread(): BigDecimal | null {
    const value = this.get("lowCushionSpread");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lowCushionSpread(value: BigDecimal | null) {
    if (!value) {
      this.unset("lowCushionSpread");
    } else {
      this.set("lowCushionSpread", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get lowWallSpread(): BigDecimal | null {
    const value = this.get("lowWallSpread");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set lowWallSpread(value: BigDecimal | null) {
    if (!value) {
      this.unset("lowWallSpread");
    } else {
      this.set("lowWallSpread", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get highActive(): boolean {
    const value = this.get("highActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set highActive(value: boolean) {
    this.set("highActive", Value.fromBoolean(value));
  }

  get lowActive(): boolean {
    const value = this.get("lowActive");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set lowActive(value: boolean) {
    this.set("lowActive", Value.fromBoolean(value));
  }

  get highLastActiveTimestamp(): BigInt {
    const value = this.get("highLastActiveTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set highLastActiveTimestamp(value: BigInt) {
    this.set("highLastActiveTimestamp", Value.fromBigInt(value));
  }

  get lowLastActiveTimestamp(): BigInt {
    const value = this.get("lowLastActiveTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lowLastActiveTimestamp(value: BigInt) {
    this.set("lowLastActiveTimestamp", Value.fromBigInt(value));
  }

  get highCapacityOhm(): BigDecimal {
    const value = this.get("highCapacityOhm");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set highCapacityOhm(value: BigDecimal) {
    this.set("highCapacityOhm", Value.fromBigDecimal(value));
  }

  get lowCapacityReserve(): BigDecimal {
    const value = this.get("lowCapacityReserve");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set lowCapacityReserve(value: BigDecimal) {
    this.set("lowCapacityReserve", Value.fromBigDecimal(value));
  }

  get highCushionPrice(): BigDecimal {
    const value = this.get("highCushionPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set highCushionPrice(value: BigDecimal) {
    this.set("highCushionPrice", Value.fromBigDecimal(value));
  }

  get lowCushionPrice(): BigDecimal {
    const value = this.get("lowCushionPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set lowCushionPrice(value: BigDecimal) {
    this.set("lowCushionPrice", Value.fromBigDecimal(value));
  }

  get highMarketId(): BigInt | null {
    const value = this.get("highMarketId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set highMarketId(value: BigInt | null) {
    if (!value) {
      this.unset("highMarketId");
    } else {
      this.set("highMarketId", Value.fromBigInt(<BigInt>value));
    }
  }

  get lowMarketId(): BigInt | null {
    const value = this.get("lowMarketId");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lowMarketId(value: BigInt | null) {
    if (!value) {
      this.unset("lowMarketId");
    } else {
      this.set("lowMarketId", Value.fromBigInt(<BigInt>value));
    }
  }

  get highWallPrice(): BigDecimal {
    const value = this.get("highWallPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set highWallPrice(value: BigDecimal) {
    this.set("highWallPrice", Value.fromBigDecimal(value));
  }

  get lowWallPrice(): BigDecimal {
    const value = this.get("lowWallPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set lowWallPrice(value: BigDecimal) {
    this.set("lowWallPrice", Value.fromBigDecimal(value));
  }

  get treasuryReserveAddress(): Bytes | null {
    const value = this.get("treasuryReserveAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set treasuryReserveAddress(value: Bytes | null) {
    if (!value) {
      this.unset("treasuryReserveAddress");
    } else {
      this.set("treasuryReserveAddress", Value.fromBytes(<Bytes>value));
    }
  }

  get treasuryReserveBalance(): BigDecimal | null {
    const value = this.get("treasuryReserveBalance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set treasuryReserveBalance(value: BigDecimal | null) {
    if (!value) {
      this.unset("treasuryReserveBalance");
    } else {
      this.set(
        "treasuryReserveBalance",
        Value.fromBigDecimal(<BigDecimal>value),
      );
    }
  }

  get treasuryDebtBalance(): BigDecimal | null {
    const value = this.get("treasuryDebtBalance");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set treasuryDebtBalance(value: BigDecimal | null) {
    if (!value) {
      this.unset("treasuryDebtBalance");
    } else {
      this.set("treasuryDebtBalance", Value.fromBigDecimal(<BigDecimal>value));
    }
  }

  get operatorReserveFactor(): BigDecimal | null {
    const value = this.get("operatorReserveFactor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set operatorReserveFactor(value: BigDecimal | null) {
    if (!value) {
      this.unset("operatorReserveFactor");
    } else {
      this.set(
        "operatorReserveFactor",
        Value.fromBigDecimal(<BigDecimal>value),
      );
    }
  }

  get operatorCushionFactor(): BigDecimal | null {
    const value = this.get("operatorCushionFactor");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigDecimal();
    }
  }

  set operatorCushionFactor(value: BigDecimal | null) {
    if (!value) {
      this.unset("operatorCushionFactor");
    } else {
      this.set(
        "operatorCushionFactor",
        Value.fromBigDecimal(<BigDecimal>value),
      );
    }
  }
}

export class PriceEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save PriceEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PriceEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PriceEvent", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): PriceEvent | null {
    return changetype<PriceEvent | null>(
      store.get_in_block("PriceEvent", id.toHexString()),
    );
  }

  static load(id: Bytes): PriceEvent | null {
    return changetype<PriceEvent | null>(
      store.get("PriceEvent", id.toHexString()),
    );
  }

  get id(): Bytes {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get blockchain(): string {
    const value = this.get("blockchain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set blockchain(value: string) {
    this.set("blockchain", Value.fromString(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    const value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get date(): string {
    const value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get type(): string {
    const value = this.get("type");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get isHigh(): boolean {
    const value = this.get("isHigh");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isHigh(value: boolean) {
    this.set("isHigh", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    const value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get snapshot(): Bytes {
    const value = this.get("snapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set snapshot(value: Bytes) {
    this.set("snapshot", Value.fromBytes(value));
  }
}

export class PricesChangedEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save PricesChangedEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PricesChangedEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PricesChangedEvent", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): PricesChangedEvent | null {
    return changetype<PricesChangedEvent | null>(
      store.get_in_block("PricesChangedEvent", id.toHexString()),
    );
  }

  static load(id: Bytes): PricesChangedEvent | null {
    return changetype<PricesChangedEvent | null>(
      store.get("PricesChangedEvent", id.toHexString()),
    );
  }

  get id(): Bytes {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get blockchain(): string {
    const value = this.get("blockchain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set blockchain(value: string) {
    this.set("blockchain", Value.fromString(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    const value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get date(): string {
    const value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get snapshot(): Bytes {
    const value = this.get("snapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set snapshot(value: Bytes) {
    this.set("snapshot", Value.fromBytes(value));
  }
}

export class SpreadsChangedEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save SpreadsChangedEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type SpreadsChangedEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("SpreadsChangedEvent", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): SpreadsChangedEvent | null {
    return changetype<SpreadsChangedEvent | null>(
      store.get_in_block("SpreadsChangedEvent", id.toHexString()),
    );
  }

  static load(id: Bytes): SpreadsChangedEvent | null {
    return changetype<SpreadsChangedEvent | null>(
      store.get("SpreadsChangedEvent", id.toHexString()),
    );
  }

  get id(): Bytes {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get blockchain(): string {
    const value = this.get("blockchain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set blockchain(value: string) {
    this.set("blockchain", Value.fromString(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    const value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get date(): string {
    const value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get high(): boolean {
    const value = this.get("high");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set high(value: boolean) {
    this.set("high", Value.fromBoolean(value));
  }

  get cushionSpread(): BigDecimal {
    const value = this.get("cushionSpread");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set cushionSpread(value: BigDecimal) {
    this.set("cushionSpread", Value.fromBigDecimal(value));
  }

  get wallSpread(): BigDecimal {
    const value = this.get("wallSpread");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set wallSpread(value: BigDecimal) {
    this.set("wallSpread", Value.fromBigDecimal(value));
  }
}

export class ThresholdFactorChangedEvent extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    const id = this.get("id");
    assert(
      id != null,
      "Cannot save ThresholdFactorChangedEvent entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ThresholdFactorChangedEvent must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set(
        "ThresholdFactorChangedEvent",
        id.toBytes().toHexString(),
        this,
      );
    }
  }

  static loadInBlock(id: Bytes): ThresholdFactorChangedEvent | null {
    return changetype<ThresholdFactorChangedEvent | null>(
      store.get_in_block("ThresholdFactorChangedEvent", id.toHexString()),
    );
  }

  static load(id: Bytes): ThresholdFactorChangedEvent | null {
    return changetype<ThresholdFactorChangedEvent | null>(
      store.get("ThresholdFactorChangedEvent", id.toHexString()),
    );
  }

  get id(): Bytes {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get blockchain(): string {
    const value = this.get("blockchain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set blockchain(value: string) {
    this.set("blockchain", Value.fromString(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    const value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get date(): string {
    const value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get thresholdFactor(): BigDecimal {
    const value = this.get("thresholdFactor");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set thresholdFactor(value: BigDecimal) {
    this.set("thresholdFactor", Value.fromBigDecimal(value));
  }
}

export class Token extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Token must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Token", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Token | null {
    return changetype<Token | null>(
      store.get_in_block("Token", id.toHexString()),
    );
  }

  static load(id: Bytes): Token | null {
    return changetype<Token | null>(store.get("Token", id.toHexString()));
  }

  get id(): Bytes {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get blockchain(): string {
    const value = this.get("blockchain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set blockchain(value: string) {
    this.set("blockchain", Value.fromString(value));
  }

  get name(): string {
    const value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get symbol(): string {
    const value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): i32 {
    const value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set decimals(value: i32) {
    this.set("decimals", Value.fromI32(value));
  }
}

export class PriceStored extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save PriceStored entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type PriceStored must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("PriceStored", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): PriceStored | null {
    return changetype<PriceStored | null>(
      store.get_in_block("PriceStored", id.toHexString()),
    );
  }

  static load(id: Bytes): PriceStored | null {
    return changetype<PriceStored | null>(
      store.get("PriceStored", id.toHexString()),
    );
  }

  get id(): Bytes {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get blockchain(): string {
    const value = this.get("blockchain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set blockchain(value: string) {
    this.set("blockchain", Value.fromString(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    const value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get date(): string {
    const value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get timestamp(): BigInt {
    const value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get snapshot(): Bytes {
    const value = this.get("snapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set snapshot(value: Bytes) {
    this.set("snapshot", Value.fromBytes(value));
  }

  get asset(): Bytes {
    const value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get price(): BigDecimal {
    const value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }
}

export class AssetAdded extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save AssetAdded entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AssetAdded must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AssetAdded", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AssetAdded | null {
    return changetype<AssetAdded | null>(
      store.get_in_block("AssetAdded", id.toHexString()),
    );
  }

  static load(id: Bytes): AssetAdded | null {
    return changetype<AssetAdded | null>(
      store.get("AssetAdded", id.toHexString()),
    );
  }

  get id(): Bytes {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get blockchain(): string {
    const value = this.get("blockchain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set blockchain(value: string) {
    this.set("blockchain", Value.fromString(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    const value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get date(): string {
    const value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get timestamp(): BigInt {
    const value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get asset(): Bytes {
    const value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }
}

export class AssetRemoved extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save AssetRemoved entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AssetRemoved must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AssetRemoved", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AssetRemoved | null {
    return changetype<AssetRemoved | null>(
      store.get_in_block("AssetRemoved", id.toHexString()),
    );
  }

  static load(id: Bytes): AssetRemoved | null {
    return changetype<AssetRemoved | null>(
      store.get("AssetRemoved", id.toHexString()),
    );
  }

  get id(): Bytes {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get blockchain(): string {
    const value = this.get("blockchain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set blockchain(value: string) {
    this.set("blockchain", Value.fromString(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    const value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get date(): string {
    const value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get timestamp(): BigInt {
    const value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get asset(): Bytes {
    const value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }
}

export class Beat extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save Beat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Beat must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Beat", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Beat | null {
    return changetype<Beat | null>(
      store.get_in_block("Beat", id.toHexString()),
    );
  }

  static load(id: Bytes): Beat | null {
    return changetype<Beat | null>(store.get("Beat", id.toHexString()));
  }

  get id(): Bytes {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get blockchain(): string {
    const value = this.get("blockchain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set blockchain(value: string) {
    this.set("blockchain", Value.fromString(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    const value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get date(): string {
    const value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get timestamp(): BigInt {
    const value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class BeatRewardIssued extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save BeatRewardIssued entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type BeatRewardIssued must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("BeatRewardIssued", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): BeatRewardIssued | null {
    return changetype<BeatRewardIssued | null>(
      store.get_in_block("BeatRewardIssued", id.toHexString()),
    );
  }

  static load(id: Bytes): BeatRewardIssued | null {
    return changetype<BeatRewardIssued | null>(
      store.get("BeatRewardIssued", id.toHexString()),
    );
  }

  get id(): Bytes {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get blockchain(): string {
    const value = this.get("blockchain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set blockchain(value: string) {
    this.set("blockchain", Value.fromString(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    const value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get date(): string {
    const value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get timestamp(): BigInt {
    const value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get to(): Bytes {
    const value = this.get("to");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get rewardToken(): Bytes {
    const value = this.get("rewardToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set rewardToken(value: Bytes) {
    this.set("rewardToken", Value.fromBytes(value));
  }

  get rewardAmount(): BigDecimal {
    const value = this.get("rewardAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set rewardAmount(value: BigDecimal) {
    this.set("rewardAmount", Value.fromBigDecimal(value));
  }
}

export class BeatRewardUpdated extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save BeatRewardUpdated entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type BeatRewardUpdated must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("BeatRewardUpdated", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): BeatRewardUpdated | null {
    return changetype<BeatRewardUpdated | null>(
      store.get_in_block("BeatRewardUpdated", id.toHexString()),
    );
  }

  static load(id: Bytes): BeatRewardUpdated | null {
    return changetype<BeatRewardUpdated | null>(
      store.get("BeatRewardUpdated", id.toHexString()),
    );
  }

  get id(): Bytes {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get blockchain(): string {
    const value = this.get("blockchain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set blockchain(value: string) {
    this.set("blockchain", Value.fromString(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    const value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get date(): string {
    const value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get timestamp(): BigInt {
    const value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get token(): Bytes {
    const value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set token(value: Bytes) {
    this.set("token", Value.fromBytes(value));
  }

  get rewardToken(): Bytes {
    const value = this.get("rewardToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set rewardToken(value: Bytes) {
    this.set("rewardToken", Value.fromBytes(value));
  }

  get rewardAmount(): BigDecimal {
    const value = this.get("rewardAmount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set rewardAmount(value: BigDecimal) {
    this.set("rewardAmount", Value.fromBigDecimal(value));
  }

  get auctionDuration(): BigInt | null {
    const value = this.get("auctionDuration");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set auctionDuration(value: BigInt | null) {
    if (!value) {
      this.unset("auctionDuration");
    } else {
      this.set("auctionDuration", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class MovingAverageAssetChange extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    const id = this.get("id");
    assert(
      id != null,
      "Cannot save MovingAverageAssetChange entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type MovingAverageAssetChange must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MovingAverageAssetChange", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): MovingAverageAssetChange | null {
    return changetype<MovingAverageAssetChange | null>(
      store.get_in_block("MovingAverageAssetChange", id.toHexString()),
    );
  }

  static load(id: Bytes): MovingAverageAssetChange | null {
    return changetype<MovingAverageAssetChange | null>(
      store.get("MovingAverageAssetChange", id.toHexString()),
    );
  }

  get id(): Bytes {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get heart(): Bytes {
    const value = this.get("heart");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set heart(value: Bytes) {
    this.set("heart", Value.fromBytes(value));
  }

  get asset(): Bytes {
    const value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get added(): boolean {
    const value = this.get("added");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set added(value: boolean) {
    this.set("added", Value.fromBoolean(value));
  }

  get blockchain(): string {
    const value = this.get("blockchain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set blockchain(value: string) {
    this.set("blockchain", Value.fromString(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    const value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get date(): string {
    const value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get timestamp(): BigInt {
    const value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class MovingAverageMetricChange extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    const id = this.get("id");
    assert(
      id != null,
      "Cannot save MovingAverageMetricChange entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type MovingAverageMetricChange must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MovingAverageMetricChange", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): MovingAverageMetricChange | null {
    return changetype<MovingAverageMetricChange | null>(
      store.get_in_block("MovingAverageMetricChange", id.toHexString()),
    );
  }

  static load(id: Bytes): MovingAverageMetricChange | null {
    return changetype<MovingAverageMetricChange | null>(
      store.get("MovingAverageMetricChange", id.toHexString()),
    );
  }

  get id(): Bytes {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get heart(): Bytes {
    const value = this.get("heart");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set heart(value: Bytes) {
    this.set("heart", Value.fromBytes(value));
  }

  get metric(): string {
    const value = this.get("metric");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set metric(value: string) {
    this.set("metric", Value.fromString(value));
  }

  get added(): boolean {
    const value = this.get("added");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set added(value: boolean) {
    this.set("added", Value.fromBoolean(value));
  }

  get blockchain(): string {
    const value = this.get("blockchain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set blockchain(value: string) {
    this.set("blockchain", Value.fromString(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    const value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get date(): string {
    const value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get timestamp(): BigInt {
    const value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class ManualTargetPriceSet extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save ManualTargetPriceSet entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type ManualTargetPriceSet must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("ManualTargetPriceSet", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): ManualTargetPriceSet | null {
    return changetype<ManualTargetPriceSet | null>(
      store.get_in_block("ManualTargetPriceSet", id.toHexString()),
    );
  }

  static load(id: Bytes): ManualTargetPriceSet | null {
    return changetype<ManualTargetPriceSet | null>(
      store.get("ManualTargetPriceSet", id.toHexString()),
    );
  }

  get id(): Bytes {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get blockchain(): string {
    const value = this.get("blockchain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set blockchain(value: string) {
    this.set("blockchain", Value.fromString(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    const value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get date(): string {
    const value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get timestamp(): BigInt {
    const value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get targetPrice(): BigDecimal {
    const value = this.get("targetPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set targetPrice(value: BigDecimal) {
    this.set("targetPrice", Value.fromBigDecimal(value));
  }
}

export class OperatorVersion extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save OperatorVersion entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OperatorVersion must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("OperatorVersion", id.toString(), this);
    }
  }

  static loadInBlock(id: string): OperatorVersion | null {
    return changetype<OperatorVersion | null>(
      store.get_in_block("OperatorVersion", id),
    );
  }

  static load(id: string): OperatorVersion | null {
    return changetype<OperatorVersion | null>(store.get("OperatorVersion", id));
  }

  get id(): string {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get version(): BigDecimal {
    const value = this.get("version");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set version(value: BigDecimal) {
    this.set("version", Value.fromBigDecimal(value));
  }
}

export class AssetObservation extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save AssetObservation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type AssetObservation must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("AssetObservation", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): AssetObservation | null {
    return changetype<AssetObservation | null>(
      store.get_in_block("AssetObservation", id.toHexString()),
    );
  }

  static load(id: Bytes): AssetObservation | null {
    return changetype<AssetObservation | null>(
      store.get("AssetObservation", id.toHexString()),
    );
  }

  get id(): Bytes {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get blockchain(): string {
    const value = this.get("blockchain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set blockchain(value: string) {
    this.set("blockchain", Value.fromString(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    const value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get date(): string {
    const value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get timestamp(): BigInt {
    const value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get asset(): Bytes {
    const value = this.get("asset");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set asset(value: Bytes) {
    this.set("asset", Value.fromBytes(value));
  }

  get price(): BigDecimal {
    const value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set price(value: BigDecimal) {
    this.set("price", Value.fromBigDecimal(value));
  }
}

export class MetricObservation extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save MetricObservation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type MetricObservation must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MetricObservation", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): MetricObservation | null {
    return changetype<MetricObservation | null>(
      store.get_in_block("MetricObservation", id.toHexString()),
    );
  }

  static load(id: Bytes): MetricObservation | null {
    return changetype<MetricObservation | null>(
      store.get("MetricObservation", id.toHexString()),
    );
  }

  get id(): Bytes {
    const value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get blockchain(): string {
    const value = this.get("blockchain");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set blockchain(value: string) {
    this.set("blockchain", Value.fromString(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get transaction(): Bytes {
    const value = this.get("transaction");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transaction(value: Bytes) {
    this.set("transaction", Value.fromBytes(value));
  }

  get date(): string {
    const value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get timestamp(): BigInt {
    const value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get metric(): string {
    const value = this.get("metric");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set metric(value: string) {
    this.set("metric", Value.fromString(value));
  }

  get value(): BigDecimal {
    const value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set value(value: BigDecimal) {
    this.set("value", Value.fromBigDecimal(value));
  }
}
