// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  BigDecimal,
  BigInt,
  Bytes,
  Entity,
  store,
  TypedMap,
  Value,
  ValueKind} from "@graphprotocol/graph-ts";

export class CushionDownEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save CushionDownEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CushionDownEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CushionDownEvent", id.toString(), this);
    }
  }

  static load(id: string): CushionDownEvent | null {
    return changetype<CushionDownEvent | null>(
      store.get("CushionDownEvent", id)
    );
  }

  get id(): string {
    const value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get date(): string {
    const value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get isHigh(): boolean {
    const value = this.get("isHigh");
    return value!.toBoolean();
  }

  set isHigh(value: boolean) {
    this.set("isHigh", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    const value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class CushionUpEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save CushionUpEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CushionUpEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CushionUpEvent", id.toString(), this);
    }
  }

  static load(id: string): CushionUpEvent | null {
    return changetype<CushionUpEvent | null>(store.get("CushionUpEvent", id));
  }

  get id(): string {
    const value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get date(): string {
    const value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get isHigh(): boolean {
    const value = this.get("isHigh");
    return value!.toBoolean();
  }

  set isHigh(value: boolean) {
    this.set("isHigh", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    const value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get capacity(): BigDecimal {
    const value = this.get("capacity");
    return value!.toBigDecimal();
  }

  set capacity(value: BigDecimal) {
    this.set("capacity", Value.fromBigDecimal(value));
  }
}

export class PricesChangedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save PricesChangedEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PricesChangedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PricesChangedEvent", id.toString(), this);
    }
  }

  static load(id: string): PricesChangedEvent | null {
    return changetype<PricesChangedEvent | null>(
      store.get("PricesChangedEvent", id)
    );
  }

  get id(): string {
    const value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get date(): string {
    const value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get cushionHighPrice(): BigDecimal {
    const value = this.get("cushionHighPrice");
    return value!.toBigDecimal();
  }

  set cushionHighPrice(value: BigDecimal) {
    this.set("cushionHighPrice", Value.fromBigDecimal(value));
  }

  get cushionLowPrice(): BigDecimal {
    const value = this.get("cushionLowPrice");
    return value!.toBigDecimal();
  }

  set cushionLowPrice(value: BigDecimal) {
    this.set("cushionLowPrice", Value.fromBigDecimal(value));
  }

  get wallHighPrice(): BigDecimal {
    const value = this.get("wallHighPrice");
    return value!.toBigDecimal();
  }

  set wallHighPrice(value: BigDecimal) {
    this.set("wallHighPrice", Value.fromBigDecimal(value));
  }

  get wallLowPrice(): BigDecimal {
    const value = this.get("wallLowPrice");
    return value!.toBigDecimal();
  }

  set wallLowPrice(value: BigDecimal) {
    this.set("wallLowPrice", Value.fromBigDecimal(value));
  }
}

export class SpreadsChangedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save SpreadsChangedEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type SpreadsChangedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("SpreadsChangedEvent", id.toString(), this);
    }
  }

  static load(id: string): SpreadsChangedEvent | null {
    return changetype<SpreadsChangedEvent | null>(
      store.get("SpreadsChangedEvent", id)
    );
  }

  get id(): string {
    const value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get date(): string {
    const value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get cushionSpread(): BigDecimal {
    const value = this.get("cushionSpread");
    return value!.toBigDecimal();
  }

  set cushionSpread(value: BigDecimal) {
    this.set("cushionSpread", Value.fromBigDecimal(value));
  }

  get wallSpread(): BigDecimal {
    const value = this.get("wallSpread");
    return value!.toBigDecimal();
  }

  set wallSpread(value: BigDecimal) {
    this.set("wallSpread", Value.fromBigDecimal(value));
  }
}

export class ThresholdFactorChangedEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    const id = this.get("id");
    assert(
      id != null,
      "Cannot save ThresholdFactorChangedEvent entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ThresholdFactorChangedEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ThresholdFactorChangedEvent", id.toString(), this);
    }
  }

  static load(id: string): ThresholdFactorChangedEvent | null {
    return changetype<ThresholdFactorChangedEvent | null>(
      store.get("ThresholdFactorChangedEvent", id)
    );
  }

  get id(): string {
    const value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get date(): string {
    const value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get thresholdFactor(): BigDecimal {
    const value = this.get("thresholdFactor");
    return value!.toBigDecimal();
  }

  set thresholdFactor(value: BigDecimal) {
    this.set("thresholdFactor", Value.fromBigDecimal(value));
  }
}

export class WallDownEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save WallDownEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WallDownEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WallDownEvent", id.toString(), this);
    }
  }

  static load(id: string): WallDownEvent | null {
    return changetype<WallDownEvent | null>(store.get("WallDownEvent", id));
  }

  get id(): string {
    const value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get date(): string {
    const value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get isHigh(): boolean {
    const value = this.get("isHigh");
    return value!.toBoolean();
  }

  set isHigh(value: boolean) {
    this.set("isHigh", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    const value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get capacity(): BigDecimal {
    const value = this.get("capacity");
    return value!.toBigDecimal();
  }

  set capacity(value: BigDecimal) {
    this.set("capacity", Value.fromBigDecimal(value));
  }
}

export class WallUpEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    const id = this.get("id");
    assert(id != null, "Cannot save WallUpEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type WallUpEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("WallUpEvent", id.toString(), this);
    }
  }

  static load(id: string): WallUpEvent | null {
    return changetype<WallUpEvent | null>(store.get("WallUpEvent", id));
  }

  get id(): string {
    const value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get block(): BigInt {
    const value = this.get("block");
    return value!.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get date(): string {
    const value = this.get("date");
    return value!.toString();
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get isHigh(): boolean {
    const value = this.get("isHigh");
    return value!.toBoolean();
  }

  set isHigh(value: boolean) {
    this.set("isHigh", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    const value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get capacity(): BigDecimal {
    const value = this.get("capacity");
    return value!.toBigDecimal();
  }

  set capacity(value: BigDecimal) {
    this.set("capacity", Value.fromBigDecimal(value));
  }
}
